import logging
from random import randint

from telegram import ReplyKeyboardMarkup
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, MessageHandler, CommandHandler, filters, \
    ConversationHandler, ContextTypes, CallbackQueryHandler

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)
logger = logging.getLogger(__name__)

CHECK, NEW = range(2)
BOT_TOKEN = "1813496348:AAFnQmBuU5OC7jcbOyylcQIgAioZtVguIKY"

ved = 0  # id –≤–µ–¥—É—â–µ–≥–æ
current_word = ""  # —Ç–µ–∫—É—â–µ–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
is_started = False

# –±–∞–∑–∞ —Å–ª–æ–≤ –¥–ª—è –∏–≥—Ä—ã
with open('data/crocodile_words.txt', 'r', encoding='utf-8') as f:
    LIST_OF_WORDS = f.read().split('\n')

# –∫–Ω–æ–ø–∫–∏
BUTTONS = [
    [
        InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–æ", callback_data=str(CHECK))
    ],
    [InlineKeyboardButton("–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ", callback_data=str(NEW))]
]
MARKUP = InlineKeyboardMarkup(BUTTONS)


def generate_word():
    global current_word
    word_id = randint(0, len(LIST_OF_WORDS) - 1)
    while LIST_OF_WORDS[word_id].lower() == current_word:
        word_id = randint(0, len(LIST_OF_WORDS) - 1)
    current_word = LIST_OF_WORDS[word_id].lower()


async def check_word(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if is_started:
        query = update.callback_query
        if query.from_user.id == ved.id:
            if current_word == '':
                generate_word()
            await query.answer("‚Ä¢–í–∞—à–µ —Å–ª–æ–≤–æ: " + current_word)
        else:
            await query.answer(f'‚Ä¢–°–µ–π—á–∞—Å –≤–µ–¥—É—â–∏–π @{ved.username}')
    return 1


async def new_word(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if is_started:
        query = update.callback_query
        if query.from_user.id == ved.id:
            generate_word()
            await query.answer("‚Ä¢–í–∞—à–µ —Å–ª–æ–≤–æ: " + current_word)
        else:
            await query.answer("‚Ä¢–°–µ–π—á–∞—Å –≤–µ–¥—É—â–∏–π @" + ved.username)
        return 1


async def help(update, context):
    await update.message.reply_text("""
    ‚´∏ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:
    /help - –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É
    /rules - –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã
    /start - –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
    /stop - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä—ã
    /skip - –°–º–µ–Ω–∞ –≤–µ–¥—É—â–µ–≥–æ
    /rating - –†–µ–π—Ç–∏–Ω–≥ –ø–æ —á–∞—Ç—É
    """)


async def current(update, context):
    if is_started:
        await update.message.reply_text(f'üí¨ @{ved.username} –æ–±—ä—è—Å–Ω—è–µ—Ç —Å–ª–æ–≤–æ.', reply_markup=MARKUP)
        return 1


async def rules(update, context):
    await update.message.reply_text("""
    ‚´∏ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ –∫—Ä–æ–∫–æ–¥–∏–ª–∞:
    ‚Ä¢ –ï—Å—Ç—å –≤–µ–¥—É—â–∏–π –∏ –∏–≥—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≥–∞–¥—ã–≤–∞—é—Ç —Å–ª–æ–≤–∞.
    ‚Ä¢ –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã /start –∑–∞–¥–∞—á–∞ –≤–µ–¥—É—â–µ–≥–æ ‚Äî –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–æ" –∏ –æ–±—ä—è—Å–Ω–∏—Ç—å –µ–≥–æ –∏–≥—Ä–æ–∫–∞–º, 
    –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—è –æ–¥–Ω–æ–∫–æ—Ä–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ï—Å–ª–∏ –≤–µ–¥—É—â–∏–π –Ω–µ –≤ —Å–∏–ª–∞—Ö –æ–±—ä—è—Å–Ω–∏—Ç—å –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ, –µ–≥–æ –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–∞–≤
    –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ".
    ‚Ä¢ –ó–∞–¥–∞—á–∞ –∏–≥—Ä–æ–∫–æ–≤ ‚Äî –æ—Ç–≥–∞–¥–∞—Ç—å –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ, –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –¥–æ–≥–∞–¥–∫—É –≤ —á–∞—Ç,
    –ø–æ –æ–¥–Ω–æ–º—É —Å–ª–æ–≤—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    ‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–µ –æ—Ç–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç 2 –±–∞–ª–ª–∞, –∞ —Ç–æ—Ç, –∫—Ç–æ –æ–±—ä—è—Å–Ω—è–ª - 1 –±–∞–ª–ª.
    ‚Ä¢ –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –Ω–µ—á–µ—Å—Ç–Ω—ã–π –≤–µ–¥—É—â–∏–π –ø–∏—à–µ—Ç —Å–ª–æ–≤–æ-–æ—Ç–≤–µ—Ç –≤ —á–∞—Ç - —Å –Ω–µ–≥–æ —Å–Ω–∏–º–∞—é—Ç—Å—è 3 –±–∞–ª–ª–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞.
    """)


async def start(update, context):
    global ved, is_started

    # keyboard_panel = [["/start", "/stop"],
    #                   ["/rules", "/help"],
    #                   ["/rating", "/current"]]

    # markup_kb = ReplyKeyboardMarkup(keyboard_panel, one_time_keyboard=True)

    if not is_started:
        is_started = True
        ved = update.effective_user

        await update.message.reply_text('‚´∏ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å ‚´∑')
        await update.message.reply_text(f'üí¨ @{ved.username} –æ–±—ä—è—Å–Ω—è–µ—Ç —Å–ª–æ–≤–æ.', reply_markup=MARKUP)

    return 1


async def stop(update, context):
    global current_word, is_started

    current_word = ""
    if is_started:
        is_started = False
        await update.message.reply_text("‚´∏ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return ConversationHandler.END
    else:
        return 1


async def response(update, context):
    global current_word, ved

    text = update.message.text.lower()
    user = update.effective_user
    if current_word in text:
        if user == ved:
            await update.message.reply_text(f"üåü –í–µ–¥—É—â–∏–π @{user.username} –Ω–∞–ø–∏—Å–∞–ª –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç.")
        else:
            ved = user
            await update.message.reply_text(
                f"üåü –ü—Ä–∞–≤–∏–ª—å–Ω–æ! @{user.username} –¥–∞—ë—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - {current_word}.")

        generate_word()
        await update.message.reply_text(
            f'üåü –ò–≥—Ä–∞–µ–º –¥–∞–ª—å—à–µ, @{user.username} –≤–µ–¥—É—â–∏–π.',
            reply_markup=MARKUP)

        return 1


def main():
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("help", help))
    application.add_handler(CommandHandler("rules", rules))
    application.add_handler(CommandHandler("current", current))

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],

        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, response),
                CallbackQueryHandler(new_word, pattern="^" + str(NEW) + "$"),
                CallbackQueryHandler(check_word, pattern="^" + str(CHECK) + "$")]
        },

        fallbacks=[CommandHandler('stop', stop)]
    )

    application.add_handler(conv_handler)
    application.run_polling()


if __name__ == '__main__':
    main()
