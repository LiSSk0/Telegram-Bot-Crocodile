import logging
import sys

from orm_stuff import create_chat, change_started, \
    change_ved, change_word, get_info, score_updates, get_user_info, top_5_players, \
    get_user_score, active_chat_players_get, \
    active_chat_players_add, active_chat_players_remove, create_rating, \
    active_chat_players_clean
from game_funcs import generate_word, help, rules
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, MessageHandler, CommandHandler, filters, \
    ConversationHandler, ContextTypes, CallbackQueryHandler

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)
logger = logging.getLogger(__name__)

CHECK, NEW, CHANGE = 0, 1, 2
try:
    with open('data/bot_token.txt', 'r', encoding='utf-8') as f:
        BOT_TOKEN = f.readline().strip()
except Exception:
    print("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –ø–æ –∞–¥—Ä–µ—Å—É data/bot_token.txt")
    sys.exit()


# –∫–Ω–æ–ø–∫–∏ –¥–ª—è —á–∞—Ç–∞
BUTTONS = [
    [
        InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–æ", callback_data=str(CHECK))
    ],
    [InlineKeyboardButton("–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ", callback_data=str(NEW))]
]
MARKUP = InlineKeyboardMarkup(BUTTONS)
BUTTON_SKIP = [
    [
        InlineKeyboardButton("–Ø –í–ï–î–£–©–ò–ô!", callback_data=str(CHANGE))
    ]]
MARKUP_SKIP = InlineKeyboardMarkup(BUTTON_SKIP)


async def check_word(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    chat_id = query.message.chat_id
    is_started, ved, current_word = get_info(chat_id)

    if is_started:
        if ved != '':
            if query.from_user.id == ved:
                if current_word == '':
                    current_word = generate_word(current_word)
                    change_word(chat_id, current_word)
                await query.answer("‚Ä¢–í–∞—à–µ —Å–ª–æ–≤–æ: " + current_word)
            else:
                ved_info = get_user_info(ved, chat_id)
                await query.answer(f'‚Ä¢–°–µ–π—á–∞—Å –≤–µ–¥—É—â–∏–π {ved_info[2]}')
            return 1
        else:
            await update.message.reply_text(
                f'‚ö† –î–ª—è –∏–≥—Ä—ã –Ω—É–∂–µ–Ω –≤–µ–¥—É—â–∏–π.')
    else:
        await update.message.reply_text("‚Ä¢–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞ –∫ —á–∞—Ç—É –≤–≤–µ–¥–∏—Ç–µ /start")


async def new_word(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    chat_id = query.message.chat_id
    is_started, ved, current_word = get_info(chat_id)
    if is_started:
        if ved != '':
            ved_info = get_user_info(ved, chat_id)
            if query.from_user.id == ved_info[0]:
                current_word = generate_word(current_word)
                change_word(chat_id, current_word)
                await query.answer("‚Ä¢–í–∞—à–µ —Å–ª–æ–≤–æ: " + current_word)
            else:
                await query.answer("‚Ä¢–°–µ–π—á–∞—Å –≤–µ–¥—É—â–∏–π " + ved_info[2])
            return 1
        else:
            await query.message.reply_text(
                f'‚ö† –î–ª—è –∏–≥—Ä—ã –Ω—É–∂–µ–Ω –≤–µ–¥—É—â–∏–π.')
    else:
        await update.message.reply_text("‚Ä¢–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞ –∫ —á–∞—Ç—É –≤–≤–µ–¥–∏—Ç–µ /start")


async def current(update, context):
    chat_id = update.message.chat_id

    is_started, ved, current_word = get_info(chat_id)
    if is_started:
        if ved != '':
            ved_info = get_user_info(ved, chat_id)
            await update.message.reply_text(f'üí¨ @{ved_info[2]} –æ–±—ä—è—Å–Ω—è–µ—Ç —Å–ª–æ–≤–æ.',
                                            reply_markup=MARKUP)
            return 1
        else:
            await update.message.reply_text(
                f'‚ö† –î–ª—è –∏–≥—Ä—ã –Ω—É–∂–µ–Ω –≤–µ–¥—É—â–∏–π.')
    else:
        await update.message.reply_text("‚Ä¢–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞ –∫ —á–∞—Ç—É –≤–≤–µ–¥–∏—Ç–µ /start")


async def play(update, context):
    chat_id = update.message.chat_id
    is_started, ved, current_word = get_info(chat_id)
    if is_started:
        user = update.effective_user
        players = active_chat_players_get(chat_id)
        if user.id in players:
            await update.message.reply_text('‚Ä¢–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ.')
        else:
            score_updates(user.id, 0, user.username, chat_id)
            await update.message.reply_text(f'‚´∏ @{user.username} —Ç–µ–ø–µ—Ä—å –≤ –∏–≥—Ä–µ! ‚´∑')

            if len(players) == 0:
                change_ved(chat_id, user.id)
                current_word = generate_word(current_word)
                change_word(chat_id, current_word)
                await update.message.reply_text(f'üí¨ @{user.username} –æ–±—ä—è—Å–Ω—è–µ—Ç —Å–ª–æ–≤–æ.',
                                                reply_markup=MARKUP)
            active_chat_players_add(chat_id, user.id)
            return 1
    else:
        await update.message.reply_text("‚Ä¢–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞ –∫ —á–∞—Ç—É –≤–≤–µ–¥–∏—Ç–µ /start")


async def end(update, context):
    # –ø–æ–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ user —É–∂–µ –≤—Å—Ç—É–ø–∞–ª –≤ –∏–≥—Ä—É –ø–æ –∫–æ–º–∞–Ω–¥–µ /play,
    # –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –∏–≥—Ä–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    chat_id = update.message.chat_id
    user = update.effective_user
    if user.id == get_info(chat_id)[1]:
        change_ved(chat_id, '')
        await update.message.reply_text(f'‚´∏ –í–µ–¥—É—â–∏–π @{user.username} –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã. ‚´∑')
        active_chat_players_remove(chat_id, user.id)
    else:
        await update.message.reply_text(f'‚´∏ @{user.username} –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã. ‚´∑')
        active_chat_players_remove(chat_id, user.id)
    return ConversationHandler.END


async def response(update, context):
    chat_id = update.message.chat_id
    is_started, ved, current_word = get_info(chat_id)

    if is_started:
        if ved == '':
            await update.message.reply_text(
                f'‚ö† –î–ª—è –∏–≥—Ä—ã –Ω—É–∂–µ–Ω –≤–µ–¥—É—â–∏–π.')
        else:
            text = update.message.text.lower()
            user = update.effective_user
            ved_info = get_user_info(ved, chat_id)
            if user.id == ved_info[0]:
                if current_word in text:
                    await update.message.reply_text(
                        f"üåü –í–µ–¥—É—â–∏–π @{user.username} –Ω–∞–ø–∏—Å–∞–ª –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç, -3 –±–∞–ª–ª–∞.")
                    score_updates(ved_info[0], -3, ved_info[2], chat_id)

                    generated_word = generate_word(current_word)
                    change_word(chat_id, generated_word)

                    await update.message.reply_text(
                        f'üåü –ò–≥—Ä–∞–µ–º –¥–∞–ª—å—à–µ, @{user.username} –≤–µ–¥—É—â–∏–π.',
                        reply_markup=MARKUP)

                    return 1
            else:
                if current_word == text:
                    await update.message.reply_text(
                        f"üåü –ü—Ä–∞–≤–∏–ª—å–Ω–æ! @{user.username} –¥–∞—ë—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - {current_word}.\n" +
                        f"@{user.username} +2 –±–∞–ª–ª–∞.\n@{ved_info[2]} +1 –±–∞–ª–ª.")
                    score_updates(ved_info[0], 1, ved_info[2], chat_id)
                    score_updates(user.id, 2, user.username, chat_id)

                    change_ved(chat_id, user.id)

                    generated_word = generate_word(current_word)
                    change_word(chat_id, generated_word)

                    await update.message.reply_text(
                        f'üåü –ò–≥—Ä–∞–µ–º –¥–∞–ª—å—à–µ, @{user.username} –≤–µ–¥—É—â–∏–π.',
                        reply_markup=MARKUP)

                    return 1
    else:
        await update.message.reply_text("‚Ä¢–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞ –∫ —á–∞—Ç—É –≤–≤–µ–¥–∏—Ç–µ /start")


async def new_ved(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    chat_id = query.message.chat_id
    is_started, ved, current_word = get_info(chat_id)
    if is_started and ved == '':
        change_ved(chat_id, query.from_user.id)
        current_word = generate_word(current_word)
        change_word(chat_id, current_word)
        await query.answer(f"–ù–æ–≤—ã–π –≤–µ–¥—É—â–∏–π - {query.from_user.username}")
        await query.message.reply_text(f'üí¨ @{query.from_user.username} –æ–±—ä—è—Å–Ω—è–µ—Ç —Å–ª–æ–≤–æ.',
                                       reply_markup=MARKUP)
        return 1
    else:
        ved_info = get_user_info(ved, chat_id)
        await query.answer(f"–í–µ–¥—É—â–∏–π - {ved_info[2]}")


async def skip(update, context):
    chat_id = update.message.chat_id
    is_started, ved, current_word = get_info(chat_id)
    if is_started:
        change_ved(chat_id, '')
        await update.message.reply_text(
            f'üö® –°–º–µ–Ω–∞ –≤–µ–¥—É—â–µ–≥–æ:',
            reply_markup=MARKUP_SKIP)
    else:
        await update.message.reply_text("‚Ä¢–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞ –∫ —á–∞—Ç—É –≤–≤–µ–¥–∏—Ç–µ /start")


async def scoring(update, context):
    chat_id = update.message.chat_id
    is_started, ved, current_word = get_info(chat_id)

    if is_started:
        score = get_user_score(update.effective_user.id, chat_id, update.effective_user.username, 0)
        if score != 0:
            await update.message.reply_text(f'‚Ä¢–¢–≤–æ–∏ –±–∞–ª–ª—ã: {score}')
        else:
            await update.message.reply_text(f'‚Ä¢–£ —Ç–µ–±—è 0 –±–∞–ª–ª–æ–≤')
        top = top_5_players(chat_id)
        if len(top) == 0:
            a = '‚Ä¢–†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç.'
        else:
            a = f'‚Ä¢–¢–µ–∫—É—â–∏–π —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n\n'
            a += '\n'.join([f'@{i[0]}: {i[1]}' for i in top])
        await update.message.reply_text(a)

    else:
        await update.message.reply_text("‚Ä¢–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞ –∫ —á–∞—Ç—É –≤–≤–µ–¥–∏—Ç–µ /start")


async def start(update, context):
    chat_type = update.message.chat.type
    if chat_type in ['group', 'supergroup']:
        chat_id = update.message.chat_id
        is_started, ved, current_word = get_info(chat_id)
        if is_started:
            await update.message.reply_text("‚Ä¢–ë–æ—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á—ë–Ω. –ß—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∏–≥—Ä—É –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /play")
        else:
            create_chat(chat_id, True, '')
            await update.message.reply_text("‚Ä¢–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω. –ß—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∏–≥—Ä—É –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /play")
            await context.bot.sendPhoto(chat_id, (open("data/croco_pic_start.jpg", "rb")))

    else:
        await update.message.reply_text(
            "üëΩ –î–æ–±–∞–≤—å—Ç–µ –ö—Ä–æ–∫–æ–¥–∏–ª–∞ –≤ –≥—Ä—É–ø–ø—É –∏ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –∏–≥—Ä—É üëΩ")


async def stop(update, context):
    chat_id = update.message.chat_id
    is_started, ved, current_word = get_info(chat_id)

    if is_started:
        change_started(chat_id, False)
        change_ved(chat_id, '')
        active_chat_players_clean(chat_id)
        await update.message.reply_text("‚Ä¢–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω.")
    else:
        await update.message.reply_text("‚Ä¢–ë–æ—Ç —É–∂–µ –æ—Ç–∫–ª—é—á—ë–Ω.")


def main():
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("help", help))
    application.add_handler(CommandHandler("rules", rules))
    application.add_handler(CommandHandler("current", current))
    application.add_handler(CommandHandler("rating", scoring))
    application.add_handler(CommandHandler("skip", skip))

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stop", stop))

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('play', play)],

        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, response),
                CallbackQueryHandler(new_word, pattern="^" + str(NEW) + "$"),
                CallbackQueryHandler(check_word, pattern="^" + str(CHECK) + "$"),
                CallbackQueryHandler(new_ved, pattern="^" + str(CHANGE) + "$")
                ]
        },

        fallbacks=[CommandHandler('end', end), CommandHandler('stop', stop)]
    )

    application.add_handler(conv_handler)
    application.run_polling()


if __name__ == '__main__':
    main()

